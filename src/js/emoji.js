import emojiRegex from 'emoji-regex';
import localEmoji from './json/localEmoji.json';

// TODO –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫ —ç–º–æ–¥–∑–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –Ω–µ –ª–æ–º–∞—è –∏—Ö
export const modifiers = {
  // –¶–≤–µ—Ç
  light: 'üèª',
  mediumLight: 'üèº',
  medium: 'üèΩ',
  mediumDark: 'üèæ',
  dark: 'üèø',
  // –ü–æ–ª
  female: '‚ôÄÔ∏è',
  male: '‚ôÇÔ∏è',
  // –°–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –¥–ª—è "—Å–∫–ª–µ–∏–≤–∞–Ω–∏—è" —ç–º–æ–¥–∑–∏
  separator: 'üßü‚Äç‚ôÄ'[2]
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–º–æ–¥–∑–∏ —Å–∏–º–≤–æ–ª –≤ hex-–∫–æ–¥
export function getEmojiCode(emoji) {
  let symbol = emoji
        .split('')
        .map((e) => e.charCodeAt(0).toString(16))
        .filter((e) => 'fe0f' != e.toLowerCase())
        .map((e) => String.fromCodePoint(parseInt(e, 16)))
        .join('');

  return encodeURIComponent(symbol).replace(/%/g, '').toLowerCase();
}

// TODO –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
export function getEmojiFromCode() {

}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑ —ç–º–æ–¥–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
export function generateEmojiImage(emoji) {
  let props = '';
  const code = getEmojiCode(emoji);
  const local = localEmoji[code];

  if(local) {
    let [id, x, y, posX, posY] = local.split('|'),
        style = `background: url('assets/emoji_sprites/sprite_${id}.png') ${x}px ${y}px`;

    if(devicePixelRatio >= 2) style += ` / ${posX}px ${posY}px;`;

    props = `src="assets/blank.gif" style="${style}"`;
  } else props = `src="https://vk.com/emoji/e/${code}.png"`;

  return `<img class="emoji" ${props} alt="${emoji}">`;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
export default function(text = '') {
  return text.replace(/&nbsp;/g, ' ').replace(/\uFE0F/g, '')
             .replace(emojiRegex(), generateEmojiImage);
}
